{"ast":null,"code":"import React,{useState}from'react';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[darkMode,setDarkMode]=useState(false);const[file,setFile]=useState(null);const[uploading,setUploading]=useState(false);const[uploadProgress,setUploadProgress]=useState(0);const toggleDarkMode=()=>{setDarkMode(!darkMode);document.documentElement.classList.toggle('dark',!darkMode);};const handleFileChange=event=>{setFile(event.target.files[0]);};const handleUpload=async()=>{if(!file)return;setUploading(true);const formData=new FormData();formData.append('file',file);try{await axios.post('/.netlify/functions/upload',formData,{headers:{'Content-Type':'multipart/form-data'},onUploadProgress:progressEvent=>{const percent=Math.round(progressEvent.loaded*100/progressEvent.total);setUploadProgress(percent);}});alert('File uploaded successfully!');}catch(error){console.error('Error uploading file:',error);}finally{setUploading(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:`min-h-screen ${darkMode?'bg-gray-900 text-white':'bg-gray-100 text-black'} p-6`,children:[/*#__PURE__*/_jsx(\"button\",{onClick:toggleDarkMode,className:\"mb-4 p-2 bg-blue-500 text-white rounded\",children:\"Toggle Dark Mode\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:handleFileChange}),/*#__PURE__*/_jsx(\"button\",{onClick:handleUpload,disabled:uploading,className:\"ml-2 p-2 bg-green-500 text-white rounded\",children:uploading?`Uploading... ${uploadProgress}%`:'Upload'})]})]});}export default App;","map":{"version":3,"names":["React","useState","axios","jsx","_jsx","jsxs","_jsxs","App","darkMode","setDarkMode","file","setFile","uploading","setUploading","uploadProgress","setUploadProgress","toggleDarkMode","document","documentElement","classList","toggle","handleFileChange","event","target","files","handleUpload","formData","FormData","append","post","headers","onUploadProgress","progressEvent","percent","Math","round","loaded","total","alert","error","console","className","children","onClick","type","onChange","disabled"],"sources":["/Users/lawrencemillard/file-upload-site/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const [file, setFile] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    document.documentElement.classList.toggle('dark', !darkMode);\n  };\n\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  const handleUpload = async () => {\n    if (!file) return;\n\n    setUploading(true);\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      await axios.post('/.netlify/functions/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n        onUploadProgress: (progressEvent) => {\n          const percent = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n          setUploadProgress(percent);\n        },\n      });\n      alert('File uploaded successfully!');\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <div className={`min-h-screen ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-100 text-black'} p-6`}>\n      <button onClick={toggleDarkMode} className=\"mb-4 p-2 bg-blue-500 text-white rounded\">\n        Toggle Dark Mode\n      </button>\n      <div className=\"mb-4\">\n        <input type=\"file\" onChange={handleFileChange} />\n        <button onClick={handleUpload} disabled={uploading} className=\"ml-2 p-2 bg-green-500 text-white rounded\">\n          {uploading ? `Uploading... ${uploadProgress}%` : 'Upload'}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1B,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGR,QAAQ,CAAC,KAAK,CAAC,CAC/C,KAAM,CAACS,IAAI,CAAEC,OAAO,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACW,SAAS,CAAEC,YAAY,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAACa,cAAc,CAAEC,iBAAiB,CAAC,CAAGd,QAAQ,CAAC,CAAC,CAAC,CAEvD,KAAM,CAAAe,cAAc,CAAGA,CAAA,GAAM,CAC3BP,WAAW,CAAC,CAACD,QAAQ,CAAC,CACtBS,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,MAAM,CAAE,CAACZ,QAAQ,CAAC,CAC9D,CAAC,CAED,KAAM,CAAAa,gBAAgB,CAAIC,KAAK,EAAK,CAClCX,OAAO,CAACW,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAChC,CAAC,CAED,KAAM,CAAAC,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CAACf,IAAI,CAAE,OAEXG,YAAY,CAAC,IAAI,CAAC,CAClB,KAAM,CAAAa,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAElB,IAAI,CAAC,CAE7B,GAAI,CACF,KAAM,CAAAR,KAAK,CAAC2B,IAAI,CAAC,4BAA4B,CAAEH,QAAQ,CAAE,CACvDI,OAAO,CAAE,CACP,cAAc,CAAE,qBAClB,CAAC,CACDC,gBAAgB,CAAGC,aAAa,EAAK,CACnC,KAAM,CAAAC,OAAO,CAAGC,IAAI,CAACC,KAAK,CAAEH,aAAa,CAACI,MAAM,CAAG,GAAG,CAAIJ,aAAa,CAACK,KAAK,CAAC,CAC9EtB,iBAAiB,CAACkB,OAAO,CAAC,CAC5B,CACF,CAAC,CAAC,CACFK,KAAK,CAAC,6BAA6B,CAAC,CACtC,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC/C,CAAC,OAAS,CACR1B,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,mBACEP,KAAA,QAAKmC,SAAS,CAAE,gBAAgBjC,QAAQ,CAAG,wBAAwB,CAAG,wBAAwB,MAAO,CAAAkC,QAAA,eACnGtC,IAAA,WAAQuC,OAAO,CAAE3B,cAAe,CAACyB,SAAS,CAAC,yCAAyC,CAAAC,QAAA,CAAC,kBAErF,CAAQ,CAAC,cACTpC,KAAA,QAAKmC,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnBtC,IAAA,UAAOwC,IAAI,CAAC,MAAM,CAACC,QAAQ,CAAExB,gBAAiB,CAAE,CAAC,cACjDjB,IAAA,WAAQuC,OAAO,CAAElB,YAAa,CAACqB,QAAQ,CAAElC,SAAU,CAAC6B,SAAS,CAAC,0CAA0C,CAAAC,QAAA,CACrG9B,SAAS,CAAG,gBAAgBE,cAAc,GAAG,CAAG,QAAQ,CACnD,CAAC,EACN,CAAC,EACH,CAAC,CAEV,CAEA,cAAe,CAAAP,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}